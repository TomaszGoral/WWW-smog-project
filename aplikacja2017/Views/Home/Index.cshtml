
<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <link rel="stylesheet" href="https://cdn.rawgit.com/openlayers/openlayers.github.io/master/en/v5.3.0/css/ol.css" type="text/css">
    <script type="text/javascript" src="@Url.Content("/Scripts/proj4.js")"></script>
    <script src="https://epsg.io/3857.js"></script>
    <script src="https://epsg.io/2178.js"></script>
    <script src="https://epsg.io/4326.js"></script>
    <script src="http://code.jquery.com/jquery-latest.js"></script>
    <script src="https://cdn.rawgit.com/openlayers/openlayers.github.io/master/en/v5.3.0/build/ol.js"></script>
    <script scr="https://apis.google.com/js/platform.js" async defer></script>
    <meta name="google-sign-client_id" content="">


    <style type="text/css">
        #map {
            height: 70vh;
            width: 100vw;
            position: absolute;
            top: 30vh;
            left: 0;
        }

        #buttons {
            height: 15vh;
            width: 100vw;
            position: absolute;
            top: 15vh;
            left: 0;
        }
        #form {
            height: 15vh;
            width: 100vw;
            position: absolute;
            top: 0vh;
            left: 0;
        }
    </style>

    <title>WWW 2019</title>

</head>
<body>
    @model aplikacja2017.Models.User
    <b>Hello @Model.user</b>
    <input type="button" onclick="location.href='http://localhost:51231/Home/List';" value="Pokaz Liste" />
    <input type="button" onclick="location.href='http://localhost:51231/Home/Account';" value="Utworz konto" />
    <form style="position: absolute; top: 8px; right: 8px;" method="post" action="Index" class="form">
        <div class="container">
            <input style="display:none" type="text" placeholder="Enter Username" name="suser" value="">
            <input style="display:none" type="password" placeholder="Enter Password" name="spassword" value="">
            <button type="submit">Logout</button>
        </div>
    </form>
    <form method="post" action="Index" class="form">
        <div class="container">
            <label for="uname"><b>Username</b></label>
            <input type="text" placeholder="Enter Username" name="suser" required>
            <label for="psw"><b>Password</b></label>
            <input type="password" placeholder="Enter Password" name="spassword" required>
            <button type="submit">Login</button>
        </div>
    </form>

    <div id="buttons" class="buttons"></div>
    <div id="map" class="map"></div>
    <script>

        // inicjalizacja mapy
        var array = [];
        var osmLayer = new ol.layer.Tile({
            source: new ol.source.OSM()
        });
        var fill = new ol.style.Fill({
            color: 'rgba(255,0,0,1)'
        });
        var stroke = new ol.style.Stroke({
            color: 'rgba(255,0,0,1)',
            width: 1.25
        });
        var stylered = new ol.style.Style({
            image: new ol.style.Circle({
                fill: fill,
                stroke: stroke,
                radius: 5
            }),
            fill: fill,
            stroke: stroke
        });
        var vectorPollutionSource = new ol.source.Vector();

        var vectorSource = new ol.source.Vector();
        var vectorLayer = new ol.layer.Vector({
            source: vectorSource,
            style: stylered
        });
        var vectorPollutionLayer = new ol.layer.Vector({
            source: vectorPollutionSource,

        });



        var stylered1 = new ol.style.Style({
            fill: new ol.style.Fill({
                color: 'rgba(255, 100, 50, 0.3)'
            }),
            stroke: new ol.style.Stroke({
                width: 2,
                color: 'rgba(255, 100, 50, 0.8)'
            }),
            image: new ol.style.Circle({
                fill: new ol.style.Fill({
                    color: 'rgba(55, 200, 150, 0.5)'
                }),
                stroke: new ol.style.Stroke({
                    width: 1,
                    color: 'rgba(55, 200, 150, 0.8)'
                }),
                radius: 7
            }),
        });
        function stylebigred(feature) {

            var
                style = [],
                type = feature.get('description'),
                white = [255, 255, 255, 1],
                blue = [0, 153, 255, 1],
                red = [255, 0, 0, 1],
                width = 6
                ;
            console.log('style', type);

            var text = "";
            if (type[0] == '#') {
                $.ajax({
                    async: false,
                    url: "/Home/Getp",
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    data: JSON.stringify({ Address: type.substr(1), Lat: 0, Lon: 0 }),
                    success: function (response) {
                        text = response.Address;
                    },
                    error: function (response) { console.warn('getAllPoints error', response); }
                });
                console.log('text', text);
            }
            style['blue'] = [
                new ol.style.Style({
                    image: new ol.style.Circle({
                        radius: width * 5,
                        fill: new ol.style.Fill({ color: blue }),
                        stroke: new ol.style.Stroke({
                            color: white, width: width / 2
                        }),

                    }),
                    text: new ol.style.Text({
                        font: '32px Calibri,sans-serif',
                        fill: new ol.style.Fill({ color: '#000' }),
                        stroke: new ol.style.Stroke({
                            color: '#fff', width: 2
                        }),

                        text: feature.get('description')

                    })
                })
            ];
            style['red'] = [
                new ol.style.Style({
                    image: new ol.style.Circle({
                        radius: width * 4,
                        fill: new ol.style.Fill({ color: red }),
                        stroke: new ol.style.Stroke({
                            color: white, width: width / 2
                        }),

                    }),
                    text: new ol.style.Text({
                        font: '32px Calibri,sans-serif',
                        fill: new ol.style.Fill({ color: '#000' }),
                        stroke: new ol.style.Stroke({
                            color: '#fff', width: 2
                        }),

                        text: text

                    })
                })
            ];
            //style['old'] = stylered;
            if (type[0] != '#') return style['blue'];
            else return style['red'];
        };
        function selectableStyle(style) {
            return function () {
                return select.getFeatures().getArray().indexOf(this) == -1 ? stylebigred : style
            }
        };
        var map = new ol.Map({
            layers: [
                osmLayer
                , vectorLayer,
                vectorPollutionLayer
            ],
            renderer: 'canvas',
            target: 'map',

            view: new ol.View({
                center: [2338840.0820985506, 6844805.243624669],
                zoom: 14
            })
        });

        // kliknięcia - strzał do serwera
        /*var selectSingleClick = new ol.interaction.Pointer({

            handleDownEvent: function (e) {
                console.warn(e.coordinate);
                lon = e.coordinate[0];
                lat = e.coordinate[1];

                $.ajax({
                    url: "/Home/AddPoint",
                    type: "",
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    data: JSON.stringify({ lon: lon, lat: lat }),
                    success: function (response) {
                        console.log('success', response);
                        alert('Adres: ' + response.Name);
                    },
                    error: function (response) {
                        console.warn('error', response);
                    }
                });
                feature = new ol.Feature({
                    geometry: new ol.geom.Point([lon, lat])
                });
                vectorSource.addFeature(feature);
            }
        });*/
        map.on("click", function (e) {
            console.warn(e.coordinate);
            var lon = e.coordinate[0];
            var lat = e.coordinate[1];
            var w = 1;
            var min = 1000000;
            for (var i = 0; i < array.length; i++){
                var temp = Math.sqrt(Math.pow(Math.abs(lon - array[i][0][0]), 2) + Math.pow(Math.abs(lat - array[i][0][1]), 2));
                if (temp < min){
                    min = temp;
                    w = array[i][1];
                }
            }
            var coord = ol.proj.toLonLat(e.coordinate).map(function (val) { return val.toFixed(6); });
            fetch('http://nominatim.openstreetmap.org/reverse?format=json&lon=' + coord[0] + '&lat=' + coord[1]).then(function (response) {
                return response.json();
            }).then(function (json) {
                var buttons = document.getElementById("buttons");
                while (buttons.firstChild) {
                    buttons.removeChild(buttons.firstChild);
                }
                var h = document.createElement("H3");
                var t = document.createTextNode("Akceptuj adres");
                h.appendChild(t);
                buttons.appendChild(h);

                var element = document.createElement("input");
                element.type = "button";
                element.value = json.address.road + " " + json.address.house_number;
                element.onclick = function () {
                    console.log('add', this.value);
                    var ad = json.address.road + " " + json.address.house_number + " " + json.address.city;
                    console.log(ad);
                    $.ajax({
                        url: "/Home/AddAddress",
                        type: "POST",
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: JSON.stringify({ Address: ad, Lon: lon, Lat: lat, Points: w , User: "@Model.user", Password: "@Model.password"}),
                        success: function (r) {
                            if (r.Address == "") {
                                alert("Wyczerpano dzienna liczbe zgloszen");
                                var buttons = document.getElementById("buttons");
                                while (buttons.firstChild) {
                                    buttons.removeChild(buttons.firstChild);
                                }
                            }
                            else if (r.Address != "Update") {
                                feature = new ol.Feature({
                                    geometry: new ol.geom.Point([r.Lon, r.Lat])
                                });
                                feature.set('description', '#' + r.Address);
                                console.log('address from feature', feature.get('description'));
                                vectorSource.addFeature(feature);

                                var buttons = document.getElementById("buttons");
                                while (buttons.firstChild) {
                                    buttons.removeChild(buttons.firstChild);
                                }
                            }
                        },
                        error: function (r) {
                            var myNode = document.getElementById("buttons");
                            while (myNode.firstChild) {
                                myNode.removeChild(myNode.firstChild);
                            }
                        }

                    });
                };
                buttons.appendChild(element);
                var cancel = document.createElement("input");
                cancel.type = "button";
                cancel.value = "Cancel";
                cancel.onclick = function () {
                    var buttons = document.getElementById("buttons");
                    while (buttons.firstChild) {
                        buttons.removeChild(buttons.firstChild);
                    }
                }
                buttons.appendChild(cancel);
            });
        });

        var drawPolygon = new ol.interaction.Draw({
            source: vectorSource,
            type: 'Point',
            style: stylered
        });

        // wczytywanie punktów z bazy danych
        $.ajax({
            url: "/Home/GetAllPoints",
            type: "POST",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            data: {},
            success: function (response) {
                var l = response.length;
                console.log('success', response);
                for (var i = 0; i < l; i++) {
                    feature = new ol.Feature({
                        geometry: new ol.geom.Point([response[i].Lon, response[i].Lat])
                    });
                    feature.set('description', '#'+response[i].Address);
                    console.log('address', feature.get('description'));
                    vectorSource.addFeature(feature);
                }
            },
            error: function (response) { console.warn('getAllPoints error', response); }
        });


        $.getJSON('https://api.waqi.info/search/?token=1ee93026043de120ab7df180bb2f73b78f6f6541&keyword=mazowieckie', function (data) {
            var l = data.data.length;
            console.log('data', data);
            console.log('l', l);
            for (var i = 0; i < l; i++) {
                console.log('point', [data.data[i].station.geo[0], data.data[i].station.geo[1]]);
                var point = ol.proj.transform([data.data[i].station.geo[1], data.data[i].station.geo[0]], 'EPSG:4326', 'EPSG:3857');
                array.push([point, data.data[i].aqi]);
                if (data.data[i].aqi != "" && data.data[i].aqi != "-"){
                    console.log('newpoint', point);
                    var feature = new ol.Feature({
                        geometry: new ol.geom.Point([point[0], point[1]]),
                    });
                    feature.set('description', data.data[i].aqi);
                    console.log('aqi', feature.get('description'));
                    vectorPollutionSource.addFeature(feature);
                }
            }
        });
        var hoverInteraction = new ol.interaction.Select({
            condition: ol.events.condition.pointerMove,
            style: stylebigred,
        });
        map.addInteraction(hoverInteraction);
    </script>
</body>
</html>
